// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package analytics

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics(in *jlexer.Lexer, out *UnstructEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schema":
			out.Schema = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics(out *jwriter.Writer, in UnstructEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix[1:])
		out.String(string(in.Schema))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnstructEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnstructEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnstructEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnstructEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics(l, v)
}
func easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics1(in *jlexer.Lexer, out *SelfDescribingData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schema":
			out.Schema = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Data)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics1(out *jwriter.Writer, in SelfDescribingData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix[1:])
		out.String(string(in.Schema))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Data {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SelfDescribingData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfDescribingData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SelfDescribingData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfDescribingData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics1(l, v)
}
func easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics2(in *jlexer.Lexer, out *SchemaParts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Protocol":
			out.Protocol = string(in.String())
		case "Vendor":
			out.Vendor = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Format":
			out.Format = string(in.String())
		case "Model":
			out.Model = string(in.String())
		case "Revision":
			out.Revision = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics2(out *jwriter.Writer, in SchemaParts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Protocol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"Vendor\":"
		out.RawString(prefix)
		out.String(string(in.Vendor))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"Model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"Revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SchemaParts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SchemaParts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SchemaParts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SchemaParts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics2(l, v)
}
func easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics3(in *jlexer.Lexer, out *Contexts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schema":
			out.Schema = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]SelfDescribingData, 0, 2)
					} else {
						out.Data = []SelfDescribingData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v3 SelfDescribingData
					(v3).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics3(out *jwriter.Writer, in Contexts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schema\":"
		out.RawString(prefix[1:])
		out.String(string(in.Schema))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Data {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contexts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contexts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c58dc5cEncodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contexts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contexts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c58dc5cDecodeGithubComSnowplowSnowplowGolangAnalyticsSdkAnalytics3(l, v)
}
